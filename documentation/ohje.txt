

Huom, nämä ovat suunniteltuja ominaisuuksia eikä kaikki viellä toimi
Lisäksi nämä saattaa muuttua ja ominaisuuksia tulla lisää!


MODUULEJEN IMPORTTAUS:

from PygameSimpleObject import * 




OBJEKTIN LUONTI:

obj = NewObject()

objektille voi antaa ominaisuuksia luonnin yhteydessä (ja myöhemmin)

tämänhetkiset parametrit construktorille:
(image = None,object_size_x:int = None,object_size_y:int = None,position_x: int = 0, position_y: int = 0,gravity_speed: float = 0.0,gravity_strength: float = 6.0,jump_strength: float = 0.0,jump_mode: int = 1,jump_collision_mode = 1)




LIIKKUMINEN:

obj.MoveX(matka: int)
liikuttaa objektia annetun matkan verran oikealle tai vasemmalle jos luku negatiivinen

obj.MoveY(matka: int)
Tekee saman pystysuunnassa

obj.Move(matka:int)
Liikuttaa objektia sen kulman mukaan automaattisesti x,y suunnissa
kulma oletuksena 0,0 objekti liikkuu oikealle 

OBJEKTIN KÄÄNTÄMINEN:
obj.rotate(kulma:int,option:int = 1)
Metodi kääntää objektin kuvaa ja päivittää automaattisesti objektin koon ja sijainnin ja kulman
option parametri 1 tarkoittaa että kulmaa kasvatetaan annetun luvun verran ja 2 sitä että annettu kulma asetetaan objektin kulmaksi


OBJEKTIN PIIRTÄMINEN:
Piirtää objektit:
DRAWOBJECTS([obj1,obj2,map,obj3]) #funktiolle annetaan lista jossa objektit on
Listan alkioiden pitää olla objekteja tai alkioina voi olla myös listoja jossa objekteja
tämä helpottaa asioita mikäli objekteja on todella suuri määrä myös tilekartta piirretään näin.

Jos objektit haluaa piirtää manuaalisesti kannattaa käyttää objektin rect_ atribuuttia joka on pygamen rect olio
Tällöin objekti piirtyy oikein.


KAMERA:
Objektia seuraava "kamera" toimii niin että
objektille annetaan kaikki muut objektit:
obj.AddCamera([obj1,obj2,map,jne]) #metodille annetaan lista jossa objektit on
Tässäkin listassa voi olla objektejen lisäksi myös listoja joissa alkiota

sitten tätä seurattavaa objektia liikutetaan
obj.CameraMoveY(matka: int)
obj.CameraMoveX(matka: int)
Järjestelmä toimii niin että seurattava objekti pysyy paikallaan ja muita objekteja liikutetaan suhteessa seurattavaan
tämä luo illuusion että kamera seuraisi tätä objektia.


KOORDINAATISTO:
Näytön koordinaatisto pysyy aina samana, eli kohta 50,50 on aina 50 pikseliä ruudun vasemmasta ylänurkasta.
Tätä varten on kehitetty liikkuva koordinaatisto järjestelmä joka pitää yllä "kameran" liikkeitä.

obj.ReturnCoordinate(x: int,y: int) metodi palauttaa "alkuperäisen" kohdan näytön kordinaatteina, eli sen kohdan jossa se oli ennen kuin kamera liikkui yhtään.
eli jos seurattava objekti liikkui alaspäin 100 pikseliä se palauttaa 0,-100 jos siltä kysytään 0,0 kohdan sijaintia.
ReturnCoordinate metodia pitää käyttää siihen objektiin jota seurataan.

Lisäksi objektin liikuttamista varten on olemassa 
obj.PlaceObject(x,y) metodi joka sijoittaa objektin uuteen kohtaan hoitaen myös kameran liikuttamisen ja koordinaatisto asiat.





TÖRMÄYKSET:

objektille voi lisätä törmäyksen toisen objektin kanssa:

AddCollision(obj1,obj2)
tällöin kumpikaan objekti ei voi liikkua kummankaan läpi
Tällekkin on mahdollista antaa lista jossa objekteja:
AddCollision(obj1,lista)

Törmäyksen voi poistaa:
DelteCollision(obj1,obj2)


Seuraava tarkista törmääkö kaksi objektia:
CollisionCheck(obj1, obj2)


funktio käyttää oletuksena objektin sen hetkistä sijaintia mutta sille voi myös antaa sijainnit:
CollisionCheck(obj1, obj2, obj1_x, obj1_y, obj2_x, obj2_y)



oletuksena törmäys kattoon hypätessä lopettaa hypyn
tämän voi halutessaan poistaa asettamalla:

obj.jump_collision_mode_ = 0 (1 niin päällä)

tällöin objekti "liimautuu" kattoon kunnes painovoima alkaa taas vaikuttamaan



PAINOVOIMA:

seuraava toteuttaa painovoiman:

obj.Gravity()

metodia kutsutaan silmukassa

Painovoiman voimakkuutta säätelee kaksi muuttujaa:

gravity_speed_ 
ja
gravity_strength_

ensimmäinen säätelee kiihtyvyyttä
ja jälkimmäinen nopeutta johon kiihdytetään

painovoiman saa "väärinpäin" laittamalla kiihtyvyyden negatiiviseksi
gravity_strength_ muuttujaan ei laiteta negatiiviseksi



HYPPY:

obj.Jump()


Hyppy toimii yhdessä painovoiman kanssa

hypyn toimintaa voi muuttaa:
jump_mode_ = 0,1 tai 2

oletuksena 1

0 = ei hyppyä
1 = hyppää vain jos objekti on toisen objektin päällä tai mikäli painovoima "väärinpäin" niin tutkitaan onko toisen objektin alapuolella
2 = hyppää edellisestä riippumatta


Hyppykin tehdään automaattisesti painvoiman kanssa eri suuntaan
