Note, these features may undergo changes!

MODULE IMPORT:

from pygamesimpleobject import *

OBJECT CREATION:

obj = NewObject()

You can assign properties to the object during creation (or later).

Current parameters for the constructor:
(image = None, position_x: int = 0, position_y: int = 0, object_size_x: int = 1, object_size_y: int = 1)

The object's dimensions are equal to the image dimensions.
If the object doesn't have an image, you can manually set its dimensions, defaulting to 1x1.

IMAGE:

You can change the image.
obj.SetImage(image)

Completely black areas in the image are transparent!

MOVEMENT:

obj.MoveX(distance: int)
Moves the object by the given distance to the right or left if the value is negative.

obj.MoveY(distance: int)
Performs the same action in the vertical direction.

obj.Move(distance: int)
Moves the object automatically in the x and y directions based on its angle. Default angle is 0, meaning the object moves to the right.

OBJECT ROTATION:

obj.rotate(angle: int, option: int = 1)
This method rotates the object's image and automatically updates the object's size, position, and angle.
The option parameter:
1 means that the angle is increased by the given value, and 2 sets the given angle as the object's angle. Default is 1.
Note: By default, the object's angle is 0, and it moves directly to the right!

DRAWING OBJECTS:

DrawObjects([obj1, obj2, map, obj3])
Draws the objects. Provide a list of objects to the function.
The list elements must be objects or lists containing objects. This is useful if there are a large number of objects or if a tilemap needs to be drawn this way.
If you want to manually draw objects, use the object's rect_ attribute to ensure correct rendering.

CAMERA:

A "camera" that follows an object works by giving the object all other objects:
obj.AddCamera([obj1, obj2, map, etc.])
This list can also contain lists with objects.
Then, the object being followed is moved using:
obj.CameraMoveY(distance: int)
obj.CameraMoveX(distance: int)
obj.CameraMove()
The system keeps the followed object stationary, and other objects move relative to it, creating the illusion that the camera is following that object.

COORDINATE SYSTEM:

The screen coordinate system always remains the same; i.e., point 50,50 is always 50 pixels from the top-left corner of the screen. To address this, a moving coordinate system has been developed to keep track of the "camera" movements.
obj.ReturnCoordinate(x: int, y: int) method returns the "original" point in screen coordinates, i.e., the point where it was before the camera moved. So, if the followed object moved down by 100 pixels, it returns 0, -100 when asked for the location of point 0,0.
Use the ReturnCoordinate method for the object being followed.
Additionally, there's the obj.PlaceObject(x, y) method for moving the object to a new location, taking care of camera movement and coordinate system issues.

COLLISIONS:

To check if two objects collide, use:
CollisionCheck(obj1, obj2)

The function defaults to using the current position of the objects, but you can also provide positions explicitly:
CollisionCheck(obj1, obj2, obj1_x, obj1_y, obj2_x, obj2_y)

You can add collisions for an object with another object:
AddCollision(obj1, obj2)

In this case, neither object can move through each other. You can also provide a list of objects:
AddCollision(obj1, list)

Collisions can be removed:
DeleteCollision(obj1, obj2)
