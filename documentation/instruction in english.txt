Note, these features may undergo changes!

MODULE IMPORT:

from pygamesimpleobject import *

OBJECT CREATION:

obj = NewObject()

You can assign properties to the object during creation (or later).

Current parameters for the constructor:
(image = None, position_x: int = 0, position_y: int = 0, object_size_x: int = 1, object_size_y: int = 1)

The object's dimensions are equal to the image dimensions.
If the object doesn't have an image, you can manually set its dimensions, defaulting to 1x1.

IMAGE:

You can change the image.
obj.SetImage(image)

Completely black areas in the image are transparent!

MOVEMENT:

obj.MoveX(distance: int)
Moves the object by the given distance to the right or left if the value is negative.

obj.MoveY(distance: int)
Performs the same action in the vertical direction.

obj.Move(distance: int)
Moves the object automatically in the x and y directions based on its angle. Default angle is 0, meaning the object moves to the right.

OBJECT ROTATION:

obj.rotate(angle: int, option: int = 1)
This method rotates the object's image and automatically updates the object's size, position, and angle.
The option parameter:
1 means that the angle is increased by the given value, and 2 sets the given angle as the object's angle. Default is 1.
Note: By default, the object's angle is 0, and it moves directly to the right!

DRAWING OBJECTS:

DrawObjects([obj1, obj2, map, obj3])
Draws the objects. Provide a list of objects to the function.
The list elements must be objects or lists containing objects. This is useful if there are a large number of objects or if a tilemap needs to be drawn this way.
If you want to manually draw objects, use the object's rect_ attribute to ensure correct rendering.

CAMERA:

You can pass a single object to the DrawObjects function, in which case things will be drawn so that the object is in the center of the screen, and thus achieve the effect of the camera following this object.

DrawObjects([obj1,obj2,map,obj3],tracked_object)




COLLISIONS:

The following function checks if two objects collide:
CollisionCheck(obj1, obj2)

By default, the function uses the current position of the objects, but you can also provide specific positions:
CollisionCheck(obj1, obj2, obj1_x, obj1_y, obj2_x, obj2_y, check_all_tiles: bool = False)

You can also provide a list of objects instead of a single object, but you cannot provide alternative positions for the list.

You can also pass a map as a parameter to the function. In this case, by default, collision detection is only performed on those tiles specified as collidable. However, if the check_all_tiles parameter is set to True, collision detection will be performed on all tiles.



You can add collisions for an object with another object:
AddCollision(obj1, obj2)

In this case, neither object can move through each other. You can also provide a list of objects:
AddCollision(obj1, list)

Collisions can be removed:
DeleteCollision(obj1, obj2)
