Note: these are planned features and not all of them are functioning yet. Additionally, these may change and new features may be added!

IMPORTING MODULES:

from PygameSimpleObject import *

CREATING AN OBJECT:

obj = NewObject()

Attributes can be given to the object during creation (and later)

Current parameters for the constructor:
(self, image=None, object_size_x: int = 1, object_size_y: int = 1, position_x: int = 0,position_y: int = 0)

MOVEMENT:

obj.MoveX(distance: int)
moves the object to the right or left by the given distance if the number is negative.

obj.MoveY(distance: int)
does the same in the vertical direction.

obj.Move(distance: int)
moves the object in the x and y directions automatically based on the angle of the object
default angle is 0,0 which moves the object to the right

ROTATING AN OBJECT:
obj.rotate(angle:int,option:int = 1)
The method rotates the image of the object and automatically updates the size, position, and angle of the object.
option parameter:
1 means the angle is increased by the given number and 2 means the given angle is set as the angle of the object
default is 1

DRAWING AN OBJECT:
Draws the objects:
DRAWOBJECTS([obj1,obj2,map,obj3]) #a list containing the objects is given as an argument
The elements of the list must be objects or the elements can also be lists containing objects
this makes things easier if there are a lot of objects to draw, tile maps are also drawn this way.

If you want to draw objects manually, it is recommended to use the object's rect_ attribute which is a pygame rect object
This way the object is drawn correctly.

CAMERA:
The "camera" that follows an object works as follows:
all other objects are given to the object being followed:
obj.AddCamera([obj1,obj2,map,etc.]) #a list containing the objects is given as an argument
In this list, there may also be lists containing objects

then the object being followed is moved
obj.CameraMoveY(distance: int)
obj.CameraMoveX(distance: int)
obj.CameraMove
The system works so that the object being followed stays in place and other objects are moved relative to it
this creates the illusion that the camera is following this object.

COORDINATE SYSTEM:
The screen coordinate system always remains the same, i.e. point 50,50 is always 50 pixels from the top left corner of the screen.
For this purpose, a moving coordinate system has been developed to keep track of the movements of the "camera".

The obj.ReturnCoordinate(x: int, y: int) method returns the "original" point as screen coordinates, i.e. the point where it was before the camera moved.
so if the object being followed moves down by 100 pixels, it returns 0,-100 if asked for the location of the 0,0 point.
ReturnCoordinate method must be used on the object being followed.

In addition, for moving the object, there is a
obj.PlaceObject(x, y) method which places the object in a new position, taking care of moving the camera and the coordinate system.

COLLISIONS:

A collision with another object can be added to the object:

AddCollision(obj1,obj2)
then neither object can move through the other.
A list of objects can also be given:
AddCollision(obj1, list)

The collision can be removed:
DelteCollision(obj1,obj2)

The following checks if two objects collide:
CollisionCheck(obj1, obj2)

The function uses the object's current position by default, but it can be given